



































































































































































































































































































































   

























































  



  





















   




  




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































.686 
.XMM 
.MODEL flat, c 
ASSUME fs:_DATA 
.CODE

EXTERN unexpected_return:PROC



























































































































































































































































































































        dr_fpu_exception_init PROC

        fninit
        push     01f80h
        ldmxcsr  dword ptr [esp]
        pop      eax
        ret
        dr_fpu_exception_init ENDP






        get_mmx_val PROC

        mov      eax, dword ptr [ 1*4 + esp]
        mov      ecx, dword ptr [ 2*4 + esp]
        
        cmp      ecx, 0
        je       get_mmx_0
        cmp      ecx, 1
        je       get_mmx_1
        cmp      ecx, 2
        je       get_mmx_2
        cmp      ecx, 3
        je       get_mmx_3
        cmp      ecx, 4
        je       get_mmx_4
        cmp      ecx, 5
        je       get_mmx_5
        cmp      ecx, 6
        je       get_mmx_6
        movq     qword ptr [eax], mm7
        jmp get_mmx_done
get_mmx_6:
        movq     qword ptr [eax], mm6
        jmp get_mmx_done
get_mmx_5:
        movq     qword ptr [eax], mm5
        jmp get_mmx_done
get_mmx_4:
        movq     qword ptr [eax], mm4
        jmp get_mmx_done
get_mmx_3:
        movq     qword ptr [eax], mm3
        jmp get_mmx_done
get_mmx_2:
        movq     qword ptr [eax], mm2
        jmp get_mmx_done
get_mmx_1:
        movq     qword ptr [eax], mm1
        jmp get_mmx_done
get_mmx_0:
        movq     qword ptr [eax], mm0
get_mmx_done:
        add      esp, 0 
        ret
        get_mmx_val ENDP







        get_frame_ptr PROC

        mov      eax, ebp
        ret
        get_frame_ptr ENDP




        get_stack_ptr PROC

        mov      eax, esp
        add      eax, 4 
        ret
        get_stack_ptr ENDP


















        switch_modes_and_load PROC

        
        mov      eax, dword ptr [ 1*4 + esp]
        mov      ecx, dword ptr [ 2*4 + esp]
        mov      edx, dword ptr [ 3*4 + esp]
        
        push     ebx
        
        DB 0eah 

        DD offset sml_transfer_to_64
        DB 033h
        DB 000h 

sml_transfer_to_64:
    


       





        DB 04ch 
 DB 08bh 
 DB 0cah 
  
        DB 04ch 
 DB 08bh 
 DB 0c1h 
  
        push     0               
        lea      edx, dword ptr [esp] 
        xor      ecx, ecx        
        
        DB 041h 
 push     esp 
        DB 041h 
 push     ebp 
        DB 041h 
 push     esi 
        DB 041h 
 push     edi 
        
        mov      ebx, esp        
        sub      esp, 32         
        and      esp, 0fffffff0h 
        call     eax
        mov      esp, ebx        
        
        DB 041h 
 pop      edi 
        DB 041h 
 pop      esi 
        DB 041h 
 pop      ebp 
        DB 041h 
 pop      esp 
        
        push     offset sml_return_to_32  
        mov      dword ptr [esp + 4], 023h 
        jmp      fword ptr [esp]
sml_return_to_32:
        add      esp, 16         
        pop      ebx             
        ret                      
        switch_modes_and_load ENDP






        switch_modes_and_call PROC

        mov      eax, esp    
        add      eax, 4 
        mov      ecx, dword ptr [ 3*4 + esp] 
        mov      edx, dword ptr [ 4*4 + esp] 
        
        push     ebx
        mov      ebx, dword ptr [ 6*4 + esp] 
        
        DB 0eah 

        DD offset smc_transfer_to_64
        DB 033h
        DB 000h 

smc_transfer_to_64:
    


        
        DB 041h 
 push     esp 
        DB 041h 
 push     ebp 
        DB 041h 
 push     esi 
        DB 041h 
 push     edi 
        DB 044h 
 mov      eax, ebx 
        
        mov      ebx, esp        
        sub      esp, 32         
        and      esp, 0fffffff0h 
        
        DB 048h 
 mov eax, dword ptr [eax] 
        call     eax             
        mov      esp, ebx        
        
        DB 041h 
 pop      edi 
        DB 041h 
 pop      esi 
        DB 041h 
 pop      ebp 
        DB 041h 
 pop      esp 
        
        push     offset smc_return_to_32  
        mov      dword ptr [esp + 4], 023h 
        jmp      fword ptr [esp]
smc_return_to_32:
        add      esp, 8          
        pop      ebx             
        ret                      
        switch_modes_and_call ENDP
















        load_dynamo PROC

    





























        
        mov      edi, edi
        










        mov      dword ptr [(((3*4)) + 4*4) + 4*4 + esp], eax
























        
        pop      ebx 
        
        pop      eax 
        sub      esp, 16 - 4*2 
         
 push eax 
 call ebx 
        add      esp, 16 - 4*2 

        
        cmp      eax, 0
        jne      load_dynamo_success
        pop      ebx 
        pop      ebx 
        jmp      load_dynamo_failure
load_dynamo_success:
        
        pop      ebx 
        
        
        pop      edi 
        
         
 push edi 
 push eax 
 call ebx 
        cmp      eax, 0
        je       load_dynamo_failure

        
        jmp      eax
        


        load_dynamo ENDP











        load_dynamo_failure PROC

        



        mov      eax, [((3*4)) + esp] 
        mov      ebx, [(9*4) + esp] 
        
        mov      [-4 + eax], ebx
        


        popa
        popfd
        
        
        
        mov      esp, [-(9*4) + ((3*4)) + esp]
        jmp      dword ptr [-4 + esp]      

        ret
        load_dynamo_failure ENDP



END
