/* **********************************************************
 * Copyright (c) 2015 Google, Inc.  All rights reserved.
 * **********************************************************/

/*
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Google, Inc. nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL GOOGLE, INC. OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */

/**
***************************************************************************
***************************************************************************
\page page_drcpusim CPU Simulator

\p drcpusim is a DynamoRIO client tool for testing that applications will
run correctly on legacy processors.

 - \ref sec_drcpusim
 - \ref sec_drcpusim_run
 - \ref sec_drcpusim_ops

\section sec_drcpusim Overview

The DynamoRIO tool \p drcpusim emulates execution on a specified CPU model
in order to validate that a target application does not execute any
instructions that are illegal or not implemented on a legacy processor.


\section sec_drcpusim_run Running the Simulator

To launch \p drcpusim, use the \p -t flag to \p drrun and specify a CPU
model via the \p -cpu parameter:

\code
bin64/drrun -t drcpusim -cpu PentiumPro -- /path/to/target/app <args> <for> <app>
\endcode

The target application will be launched under a DynamoRIO client that
monitors every instruction executed.  If an instruction is attempted to be
executed that is not supported on the requested CPU model, \p drcpusim will
abort the execution and report the offending instruction.  Any child
processes will be followed into and checked as well.


\section sec_drcpusim_ops Simulator Parameters

\p drcpusim's behavior can be controlled through options passed after the
\p -c \p drcpusim but prior to the "--" delimiter on the command line:

\code
bin64/drrun -t drcpusim <options> <to> <drcpusim> -- /path/to/target/app <args> <for> <app>
\endcode

Boolean options can be disabled using a "-no_" prefix.

The parameters available are described below:

- <b>-cpu</b>
  <br><i>default value: Westmere</i>
  <br>Specifies the CPU model to simulate.  It can be one of the following names, which 
correspond to the given CPU family, model, and major ISA features (as well as
numerous other minor features):
<table>
<tr><td><b>Parameter</b></td><td><b>Notes</b></td><td><b>Family</b></td><td><b>Model</b></td><td><b>Major ISA Features</b></td></tr>
<tr><td>Pentium   </td><td>&nbsp;</td><td>5</td><td>2</td><td>&nbsp;</td></tr>
<tr><td>PentiumMMX</td><td>&nbsp;</td><td>5</td><td>4</td><td>MMX</td></tr>
<tr><td>PentiumPro</td><td>&nbsp;</td><td>6</td><td>1</td><td>&nbsp;</td></tr>
<tr><td>Pentium2</td><td>alias for Klamath</td><td>6</td><td>3</td><td>MMX</td></tr>
<tr><td>Klamath</td><td>Pentium2</td><td>6</td><td>3</td><td>MMX</td></tr>
<tr><td>Deschutes</td><td>Pentium2</td><td>6</td><td>5</td><td>MMX</td></tr>
<tr><td>Pentium3</td><td>alias for Coppermine</td><td>6</td><td>7</td><td>MMX, SSE</td></tr>
<tr><td>Coppermine</td><td>Pentium3</td><td>6</td><td>7</td><td>MMX, SSE</td></tr>
<tr><td>Tualatin</td><td>Pentium3</td><td>6</td><td>7</td><td>MMX, SSE</td></tr>
<tr><td>PentiumM</td><td>alias for Banias</td><td>15</td><td>2</td><td>MMX, SSE, SSE2</td></tr>
<tr><td>Banias</td><td>PentiumM</td><td>15</td><td>2</td><td>MMX, SSE, SSE2</td></tr>
<tr><td>Dothan</td><td>PentiumM</td><td>15</td><td>2</td><td>MMX, SSE, SSE2</td></tr>
<tr><td>Willamette</td><td>early Pentium4</td><td>15</td><td>2</td><td>MMX, SSE, SSE2</td></tr>
<tr><td>Northwood</td><td>early Pentium4</td><td>15</td><td>2</td><td>MMX, SSE, SSE2</td></tr>
<tr><td>Pentium4</td><td>alias for Prescott</td><td>15</td><td>4</td><td>MMX, SSE, SSE2, SSE3</td></tr>
<tr><td>Prescott</td><td>Pentium4</td><td>15</td><td>4</td><td>MMX, SSE, SSE2, SSE3</td></tr>
<tr><td>Presler</td><td>Pentium4</td><td>15</td><td>4</td><td>MMX, SSE, SSE2, SSE3</td></tr>
<tr><td>Core2</td><td>alias for Merom</td><td>6</td><td>15</td><td>MMX, SSE, SSE2, SSE3, SSSE3</td></tr>
<tr><td>Merom</td><td>Core2</td><td>6</td><td>15</td><td>MMX, SSE, SSE2, SSE3, SSSE3</td></tr>
<tr><td>Penryn</td><td>Core2</td><td>6</td><td>23</td><td>MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1</td></tr>
<tr><td>Nehalem</td><td>Core i7</td><td>6</td><td>26</td><td>MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2</td></tr>
<tr><td>Westmere</td><td>Core i7</td><td>6</td><td>44</td><td>MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2</td></tr>
<tr><td>Sandybridge</td><td>Core i7</td><td>6</td><td>42</td><td>MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX</td></tr>
<tr><td>Ivybridge</td><td>Core i7</td><td>6</td><td>58</td><td>MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, F16C</td></tr>
</table>
Some simplifications are made: for example, drcpusim assumes that all Prescott models support 64-bit, ignoring the early E-series models.  Furthermore, drcpusim focuses on cpuid features rather than the family, and ends up treating requests for slightly different cpu models that have insignificant cpuid feature differences as identical: for example, a request for Northwood will result in a Banias model.

- <b>-continue</b>
  <br><i>default value: false</i>
  <br>By default, drcpusim aborts when it encounters an invalid instruction.  This option requests that the tool continue, simply printing each invalid instruction it encounters.  It may print the same instruction twice, depending on whether the underlying tool engine needs to re-translate that code again.

- <b>-fool_cpuid</b>
  <br><i>default value: true</i>
  <br>When the application executes the CPUID instruction, when this option is enabled, drcpusim will supply CPUID results that match the CPU model being simulated.

- <b>-allow_prefetchw</b>
  <br><i>default value: true</i>
  <br>The PREFETCHW instruction is only fully supported by AMD processors, yet most Intel processors, while they do not officially support it, will turn it into a NOP. As it is commonly seen on Windows, by default drcpusim does not complain about it.

- <b>-blacklist</b>
  <br><i>default value: ""</i>
  <br>The blacklist is a :-separated list of library names for which violations should not be reported.

- <b>-ignore_all_libs</b>
  <br><i>default value: false</i>
  <br>Violations in libraries are ignored: only violations in the application executable itself are reported.

- <b>-verbose</b>
  <br><i>default value: 0</i>
  <br>Verbosity level for notifications.




*/
