






























































































































































































































































































































































































































































































































   

























































  



  





















   




  


































































































































































































































































































































































































































































































































































































































































































































































































































































































































.686 
.XMM 
.MODEL flat, c 
ASSUME fs:_DATA 
.CODE








        test_asm PROC


        push ebx 
 
 push ebp 
 
 push esi 
 
 push edi 

        sub      esp, 0 
        

        jmp      test1
        
     test1:
        mov      edx, 0f1f1h
        mov      edx, 0f1f1h
        mov      edx, esp
        mov      ebx, dword ptr [edx]

        jmp      test2_init
     test2_init:
        


        mov      ebx, 00h
        jmp      test2
     test2:
        
        mov      edx, 0f1f2h
        mov      edx, 0f1f2h
        mov      edx, esp
        mov      dword ptr [edx - 8], edx
        mov      edx, dword ptr [edx - 8]
        


        mov      edx, dword ptr [edx]

        jmp      test4
        
     test4:
        mov      edx, 0f1f4h
        mov      edx, 0f1f4h
        setne    dl
        cmp      edx, esp

        jmp      test11
        
     test11:
        mov      edx, 0f1f11h
        mov      edx, 0f1f11h
        cmp      edx, edx
        push     00h
        pop      eax
        mov      eax, edx
        mov      edx, eax
        je       test11_done
        
        xor      edx, edx
        mov      dword ptr [edx], edx
        jmp      test11_done
     test11_done:
        jmp     test12
        
     test12:
        mov      edx, 0f1f12h
        mov      edx, 0f1f12h
        mov      eax, 012h
        cmp      eax, 012h
        je       test12_done
        
        xor      edx, edx
        mov      dword ptr [edx], edx
        jmp      test12_done
     test12_done:
        jmp     epilog

     epilog:
        add      esp, 0 
        pop edi 
 pop esi 
 pop ebp 
 pop ebx
        ret



























































        test_asm ENDP



        test_asm_faultA PROC


        push ebx 
 
 push ebp 
 
 push esi 
 
 push edi 

        sub      esp, 0 
        

        jmp      test3
        
     test3:
        mov      edx, 0f1f3h
        mov      edx, 0f1f3h
        nop
        ud2

        jmp      epilog2
     epilog2:
        add      esp, 0 
        pop edi 
 pop esi 
 pop ebp 
 pop ebx
        ret



























        test_asm_faultA ENDP



        test_asm_faultB PROC


        push ebx 
 
 push ebp 
 
 push esi 
 
 push edi 

        sub      esp, 0 
        

        jmp      test5
        
     test5:
        mov      edx, 0f1f5h
        mov      edx, 0f1f5h
        mov      ah, 0d7h
        sahf
        nop
        mov      eax, 0
        mov      eax, dword ptr [eax] 

        jmp      epilog3
     epilog3:
        add      esp, 0 
        pop edi 
 pop esi 
 pop ebp 
 pop ebx
        ret

































        test_asm_faultB ENDP



        test_asm_faultC PROC


        push ebx 
 
 push ebp 
 
 push esi 
 
 push edi 

        sub      esp, 0 
        

        jmp      test6
        
     test6:
        mov      edx, 0f1f6h
        mov      edx, 0f1f6h
        nop
        mov      edx, 0f1f7h
        nop
        ud2

        jmp      epilog6
     epilog6:
        add      esp, 0 
        pop edi 
 pop esi 
 pop ebp 
 pop ebx
        ret









        test_asm_faultC ENDP



        test_asm_faultD PROC































        ret









        test_asm_faultD ENDP



        test_asm_faultE PROC
































        ret









        test_asm_faultE ENDP

END


