


























































































































































































































































































































































   

























































  



  





















   




  



































































































































































































































































































































































































































































































































































































































































































































































































.686 
.XMM 
.MODEL flat, c 
ASSUME fs:_DATA 
.CODE










EXTERN callee:PROC


        test_ret PROC

        
        


        push ebx 

        push ebp 

        push esi 

        push edi 

        sub      esp, 0 
        
         
 call callee 
 
        mov      eax, dword ptr [esp - 4]
        add      esp, 0 
        pop      edi
        pop      esi
        pop      ebp
        pop      ebx
        ret
        test_ret ENDP



        test_iret PROC

        
        


        push ebx 

        push ebp 

        push esi 

        push edi 

        sub      esp, 0 
        







        pushfd
        push     cs

        call skip_iret
     next_instr_iret:



        mov      eax, dword ptr [esp - 3*4]

        add      esp, 0 
        pop      edi
        pop      esi
        pop      ebp
        pop      ebx
        ret
     skip_iret:



        iretd

        test_iret ENDP



        test_far_ret PROC

        
        


        push ebx 

        push ebp 

        push esi 

        push edi 

        sub      esp, 0 
        



        push     cs

        call skip_far
     next_instr_far:
        mov      eax, dword ptr [esp - 2*4]
        add      esp, 0 
        pop      edi
        pop      esi
        pop      ebp
        pop      ebx
        ret
     skip_far:



        DB 0cbh 
 
        test_far_ret ENDP

END


